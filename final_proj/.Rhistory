#                       "Male" = "M")),
#         radioButtons(inputId = "Color", label = "Plot Color",
#                      c("Red"),
#                      selected = "Red")
#         ),
mainPanel(
plotOutput("mannerBar")
),
tabPanel("Tab 5 final",
h2("Conclusion")
),
mainPanel(
textOutput("conclusion")
)
)
shinyApp(ui = ui , server = server)
server <- function(input, output) {
##########Addintropage stuff
#################Mary-MaePage
gender_name <- reactive({
if(is.null(input$gender)) {
by_race
}  else {
by_race %>%
filter(gender %in% input$gender)
}
})
output$race_bar <- renderPlot({
ggplot(gender_name(), aes(race, shootings )) +
geom_col(col = "Black", fill = input$Color) +
labs (
x = "Race",
y = "Number of Shootings",
title = "Number of Shootings by Race and Gender") +
theme(axis.text.x=element_text(angle=50, size=10, vjust=0.5))
})
output$message <- renderText ({
high_race <- by_race %>%
filter(gender == input$gender) %>%
arrange(desc(shootings))
paste0("The race ",  high_race$race[1],  " and the gender ",  input$gender , " have the highest amount of fatal police shootings with ", high_race$shootings[1], " shootings. ")
})
output$descripation_one <- renderText({
print("This bar graph helps us look at the disparities of fatal police shootings among race. The user
can then adjust it to further look at the differences between different races and different genders. This allows us to
understand and look at the patterns of who is being fatally shot most by police.")
})
##################End Mary-Mae Page
###################AmyPage
output$map <- renderPlot({
subset <- shoot_map %>%
filter(armed %in% input$armed)
shoot_map_plot <- ggplot(subset, aes(long, lat, group = group)) +
geom_polygon(aes(fill = armed_count)) + coord_quickmap() +
labs(
title = "Count of Fatal Police Shootings by US State"
)
shoot_map_plot
})
###################End Amy Page
##################AshleyPage
output$mannerBar <- renderPlot({
subset<- data %>%
filter(gender %in% input$gender)
ggplot(data= subset, aes(x= manner_of_death, fill= ))+
geom_bar() + labs(title= "Manner of Death Bar Graph", x= "Manner of Death", y= "Occurrances")
})
###################End Ashley Page
#############conclusion
output$conclusion <- renderText({
print("Throughout our project we looked at a lot of different aspects of this data.
To start, we look at the shooting counts among the different states. We found that ", shoot_count_high$Abbreviation[1],
" had the highest total shoot count with ", shoot_count_high$count[1], " fatal police shootings.
We allow the user to switch between different things the person was armed (or not armed with) this showed a pattern that
a high majority of people who were shot were actually not armed. This number is alarming with ", armed_count$count[3],
" people being unarmed while they were fatally shot by the police. This shows that many police error on the side of caution
and fear when shooting at citzens, which can be very problematic when it entails taking a human life.")
br()
print("In our next page, we showed a bar graph that showed the number of fatal shootings spiliting up by race. This showed us that in this data, the most people
being shot were the ", by_race_high$race[1], " race and ", by_race_high$gender[1], " gender with ", by_race_high$shootings[1],
" shootings. This number is closely followed by Black Males with ", by_race_high$shootings[2], " shootings. This shows us
that Males are being shot more than females and in this particular data White Males more than Blakc Males. In our last page we
created a bar graph that depicted that manner of death.")
br()
print("ADD ASHLEY DATA!!!! All of this data is very important because it allows us to investigate the Police force and think about the manner of fatal shootings. Are they always justified? With these
numbers we can see that although more people are armed than unarmed, there is still an alarming number of unarmed
individuals being shot. Furthermore we can start investigating deeper questions such as, who gets to decides if a person
lives or dies? Should the Police person have the ability to be the judge, jury and executor?")
br()
print("This data as a whole I believe was aliry unbiased. It was giving numbers and statistics which were not pulled out of thin air. The major issue that we had with this
data is that there were many catergories that did not have a variable in the box, like empty parts in the data. This made it
a little more diffcult when we constructed charts.")
br()
print("What's next with this project? Investigate another data set that shows
fatal Police shooting but during a different time period. We could compare and contrast the data and look how fatal Police shootings
have changed over time." )
})
}
# Define UI for application that draws a histogram
ui <- fluidPage(
tabsetPanel(type = "tabs",
####INTRO PAGE TAB
tabPanel("Introduction"),
#####AMY TAB --add your sidebar & Main Panel
tabPanel("Tab 2",
h2("Amy Page")
),
selectInput("armed", "armed", choices = unique(shoot_map$armed)),
mainPanel(
plotOutput("map")
),
tabPanel("Tab 2",
h2("Mary-Mae Page")
)
),
sidebarLayout(
sidebarPanel(
uiOutput("gender"),
selectInput(inputId = "gender", "Select Gender:",
c("Female" = "F",
"Male" = "M")),
radioButtons(inputId = "Color", label = "Select Bar Color",
c("Red", "Blue", "Gray", "Black"),
selected = "Black"
)
),
mainPanel(
plotOutput("race_bar"),
textOutput("message"),
textOutput("descripation_one")
)),
tabPanel("Tab 4",
h2("Ashley Page")
),
# sidebarLayout(
#     sidebarPanel(
#         uiOutput("gender"),
#         selectInput(inputId = "gender", "Select Gender:",
#                     c("Female" = "F",
#                       "Male" = "M")),
#         radioButtons(inputId = "Color", label = "Plot Color",
#                      c("Red"),
#                      selected = "Red")
#         ),
mainPanel(
plotOutput("mannerBar")
),
tabPanel("Tab 5 final",
h2("Conclusion")
),
mainPanel(
textOutput("conclusion")
)
)
# Define UI for application that draws a histogram
ui <- fluidPage(
tabsetPanel(type = "tabs",
####INTRO PAGE TAB
tabPanel("Introduction"),
#####AMY TAB --add your sidebar & Main Panel
tabPanel("Tab 2",
h2("Amy Page")
),
selectInput("armed", "armed", choices = unique(shoot_map$armed)),
mainPanel(
plotOutput("map")
),
tabPanel("Tab 2",
h2("Mary-Mae Page")
)
),
sidebarLayout(
sidebarPanel(
uiOutput("gender"),
selectInput(inputId = "gender", "Select Gender:",
c("Female" = "F",
"Male" = "M")),
radioButtons(inputId = "Color", label = "Select Bar Color",
c("Red", "Blue", "Gray", "Black"),
selected = "Black"
)
),
mainPanel(
plotOutput("race_bar"),
textOutput("message"),
textOutput("descripation_one")
)),
tabPanel("Tab 4",
h2("Ashley Page")
),
# sidebarLayout(
#     sidebarPanel(
#         uiOutput("gender"),
#         selectInput(inputId = "gender", "Select Gender:",
#                     c("Female" = "F",
#                       "Male" = "M")),
#         radioButtons(inputId = "Color", label = "Plot Color",
#                      c("Red"),
#                      selected = "Red")
#         ),
mainPanel(
plotOutput("mannerBar")
),
tabPanel("Tab 5 final",
h2("Conclusion")
),
mainPanel(
textOutput("conclusion")
)
)
shinyApp(ui = ui , server = server)
shoot_map %>% filter(armed = "knife")
shoot_map %>% filter(armed == "knife")
armed_count %>% group_by(Abbreviation)
View(armed_count)
## create counts of shootings by state
shoot_count <- shoot_map %>%
group_by(Abbreviation) %>%
summarize(count = n())
armed_count <- shoot_map %>%
group_by(armed, Abbreviation) %>%
summarize(count = n()) %>% arrange(desc(count))
armed_top_ten <- armed_count[-4,]
## reduce to top ten
armed_top_ten <- armed_top_ten[1:10, 1]
armed_top_ten <- armed_top_ten$armed
shoot_map %>% group_by(armed, Abbreviation) %>% arrange(desc(armed_count))
## create counts of shootings by state
shoot_count <- shoot_map %>%
group_by(Abbreviation) %>%
summarize(count = n())
armed_count <- shoot_map %>%
group_by(armed, Abbreviation) %>%
summarize(count = n()) %>% arrange(desc(count))
armed_top_ten <- armed_count[-4,]
## reduce to top ten
armed_top_ten <- armed_top_ten[1:10, 1]
armed_top_ten <- armed_top_ten$armed
## filter shoot data to only these top ten armed
shoot_map <- shoot_map %>% filter(armed %in% armed_top_ten)
## plot map
shoot_map_plot <- ggplot(shoot_map, aes(long, lat, group = group)) +
geom_polygon(aes(fill = count)) + coord_quickmap() +
labs(
title = "Count of Fatal Police Shootings by US State"
)
server <- function(input, output) {
##########Addintropage stuff
#################Mary-MaePage
gender_name <- reactive({
if(is.null(input$gender)) {
by_race
}  else {
by_race %>%
filter(gender %in% input$gender)
}
})
output$race_bar <- renderPlot({
ggplot(gender_name(), aes(race, shootings )) +
geom_col(col = "Black", fill = input$Color) +
labs (
x = "Race",
y = "Number of Shootings",
title = "Number of Shootings by Race and Gender") +
theme(axis.text.x=element_text(angle=50, size=10, vjust=0.5))
})
output$message <- renderText ({
high_race <- by_race %>%
filter(gender == input$gender) %>%
arrange(desc(shootings))
paste0("The race ",  high_race$race[1],  " and the gender ",  input$gender , " have the highest amount of fatal police shootings with ", high_race$shootings[1], " shootings. ")
})
output$descripation_one <- renderText({
print("This bar graph helps us look at the disparities of fatal police shootings among race. The user
can then adjust it to further look at the differences between different races and different genders. This allows us to
understand and look at the patterns of who is being fatally shot most by police.")
})
##################End Mary-Mae Page
###################AmyPage
output$map <- renderPlot({
subset <- shoot_map %>%
filter(armed %in% input$armed)
shoot_map_plot <- ggplot(subset, aes(long, lat, group = group)) +
geom_polygon(aes(fill = armed_count)) + coord_quickmap() +
labs(
title = "Count of Fatal Police Shootings by US State"
)
shoot_map_plot
})
###################End Amy Page
##################AshleyPage
output$mannerBar <- renderPlot({
subset<- data %>%
filter(gender %in% input$gender)
ggplot(data= subset, aes(x= manner_of_death, fill= ))+
geom_bar() + labs(title= "Manner of Death Bar Graph", x= "Manner of Death", y= "Occurrances")
})
###################End Ashley Page
#############conclusion
output$conclusion <- renderText({
print("Throughout our project we looked at a lot of different aspects of this data.
To start, we look at the shooting counts among the different states. We found that ", shoot_count_high$Abbreviation[1],
" had the highest total shoot count with ", shoot_count_high$count[1], " fatal police shootings.
We allow the user to switch between different things the person was armed (or not armed with) this showed a pattern that
a high majority of people who were shot were actually not armed. This number is alarming with ", armed_count$count[3],
" people being unarmed while they were fatally shot by the police. This shows that many police error on the side of caution
and fear when shooting at citzens, which can be very problematic when it entails taking a human life.")
br()
print("In our next page, we showed a bar graph that showed the number of fatal shootings spiliting up by race. This showed us that in this data, the most people
being shot were the ", by_race_high$race[1], " race and ", by_race_high$gender[1], " gender with ", by_race_high$shootings[1],
" shootings. This number is closely followed by Black Males with ", by_race_high$shootings[2], " shootings. This shows us
that Males are being shot more than females and in this particular data White Males more than Blakc Males. In our last page we
created a bar graph that depicted that manner of death.")
br()
print("ADD ASHLEY DATA!!!! All of this data is very important because it allows us to investigate the Police force and think about the manner of fatal shootings. Are they always justified? With these
numbers we can see that although more people are armed than unarmed, there is still an alarming number of unarmed
individuals being shot. Furthermore we can start investigating deeper questions such as, who gets to decides if a person
lives or dies? Should the Police person have the ability to be the judge, jury and executor?")
br()
print("This data as a whole I believe was aliry unbiased. It was giving numbers and statistics which were not pulled out of thin air. The major issue that we had with this
data is that there were many catergories that did not have a variable in the box, like empty parts in the data. This made it
a little more diffcult when we constructed charts.")
br()
print("What's next with this project? Investigate another data set that shows
fatal Police shooting but during a different time period. We could compare and contrast the data and look how fatal Police shootings
have changed over time." )
})
}
# Define UI for application that draws a histogram
ui <- fluidPage(
tabsetPanel(type = "tabs",
####INTRO PAGE TAB
tabPanel("Introduction"),
#####AMY TAB --add your sidebar & Main Panel
tabPanel("Tab 2",
h2("Amy Page")
),
selectInput("armed", "armed", choices = unique(shoot_map$armed)),
mainPanel(
plotOutput("map")
),
tabPanel("Tab 2",
h2("Mary-Mae Page")
)
),
sidebarLayout(
sidebarPanel(
uiOutput("gender"),
selectInput(inputId = "gender", "Select Gender:",
c("Female" = "F",
"Male" = "M")),
radioButtons(inputId = "Color", label = "Select Bar Color",
c("Red", "Blue", "Gray", "Black"),
selected = "Black"
)
),
mainPanel(
plotOutput("race_bar"),
textOutput("message"),
textOutput("descripation_one")
)),
tabPanel("Tab 4",
h2("Ashley Page")
),
# sidebarLayout(
#     sidebarPanel(
#         uiOutput("gender"),
#         selectInput(inputId = "gender", "Select Gender:",
#                     c("Female" = "F",
#                       "Male" = "M")),
#         radioButtons(inputId = "Color", label = "Plot Color",
#                      c("Red"),
#                      selected = "Red")
#         ),
mainPanel(
plotOutput("mannerBar")
),
tabPanel("Tab 5 final",
h2("Conclusion")
),
mainPanel(
textOutput("conclusion")
)
)
# Define UI for application that draws a histogram
ui <- fluidPage(
tabsetPanel(type = "tabs",
####INTRO PAGE TAB
tabPanel("Introduction"),
#####AMY TAB --add your sidebar & Main Panel
tabPanel("Tab 2",
h2("Amy Page")
),
selectInput("armed", "armed", choices = unique(shoot_map$armed)),
mainPanel(
plotOutput("map")
),
tabPanel("Tab 2",
h2("Mary-Mae Page")
)
),
sidebarLayout(
sidebarPanel(
uiOutput("gender"),
selectInput(inputId = "gender", "Select Gender:",
c("Female" = "F",
"Male" = "M")),
radioButtons(inputId = "Color", label = "Select Bar Color",
c("Red", "Blue", "Gray", "Black"),
selected = "Black"
)
),
mainPanel(
plotOutput("race_bar"),
textOutput("message"),
textOutput("descripation_one")
)),
tabPanel("Tab 4",
h2("Ashley Page")
),
# sidebarLayout(
#     sidebarPanel(
#         uiOutput("gender"),
#         selectInput(inputId = "gender", "Select Gender:",
#                     c("Female" = "F",
#                       "Male" = "M")),
#         radioButtons(inputId = "Color", label = "Plot Color",
#                      c("Red"),
#                      selected = "Red")
#         ),
mainPanel(
plotOutput("mannerBar")
),
tabPanel("Tab 5 final",
h2("Conclusion")
),
mainPanel(
textOutput("conclusion")
)
)
# Define UI for application that draws a histogram
ui <- fluidPage(
tabsetPanel(type = "tabs",
####INTRO PAGE TAB
tabPanel("Introduction"),
#####AMY TAB --add your sidebar & Main Panel
tabPanel("Tab 2",
h2("Amy Page")
),
selectInput("armed", "armed", choices = unique(shoot_map$armed)),
mainPanel(
plotOutput("map")
),
tabPanel("Tab 2",
h2("Mary-Mae Page")
)
),
sidebarLayout(
sidebarPanel(
uiOutput("gender"),
selectInput(inputId = "gender", "Select Gender:",
c("Female" = "F",
"Male" = "M")),
radioButtons(inputId = "Color", label = "Select Bar Color",
c("Red", "Blue", "Gray", "Black"),
selected = "Black"
)
),
mainPanel(
plotOutput("race_bar"),
textOutput("message"),
textOutput("descripation_one")
)),
tabPanel("Tab 4",
h2("Ashley Page")
),
# sidebarLayout(
#     sidebarPanel(
#         uiOutput("gender"),
#         selectInput(inputId = "gender", "Select Gender:",
#                     c("Female" = "F",
#                       "Male" = "M")),
#         radioButtons(inputId = "Color", label = "Plot Color",
#                      c("Red"),
#                      selected = "Red")
#         ),
mainPanel(
plotOutput("mannerBar")
),
tabPanel("Tab 5 final",
h2("Conclusion")
),
mainPanel(
textOutput("conclusion")
)
)
shinyApp(ui = ui , server = server)
## create counts of shootings by state
shoot_count <- shoot_map %>%
group_by(Abbreviation) %>%
summarize(count = n())
armed_count <- shoot_map %>%
group_by(armed) %>%
summarize(count = n()) %>% arrange(desc(count))
armed_top_ten <- armed_count[-4,]
## reduce to top ten
armed_top_ten <- armed_top_ten[1:10, 1]
armed_top_ten <- armed_top_ten$armed
prop_ill_true <- shoot_map %>%
group_by(Abbreviation) %>%
filter(signs_of_mental_illness == "TRUE") %>%
summarize(count = n())
