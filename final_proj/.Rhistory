<<<<<<< HEAD
=======
<<<<<<< HEAD
=======
select(prop_true, prop_false, long, lat, group, fips.x, fips.y)
View(prop_ill_map)
##################End Mary-Mae Page
###################AmyPage
tf_select <- reactive({
selection <- input$col_list
tf_select <- select_(long, lat, group, .dots = selection)
})
=======
a little more diffcult when we constructed charts.")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
>>>>>>> 544cc3444d2ec85a0913febfec18a48efb002e22
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
<<<<<<< HEAD
server <- function(input, output) {
##########Addintropage stuff
output$intro <- renderText({
print("Our Data is collected by the Washington Post and accounts for every
fatal police shooting since Jan 1st 2015 to June 1st 2020. We found this located
on the Kaggle website (https://www.kaggle.com/andrewmvd/police-deadly-force-usage-us/metadata)
and decided that this is what we wanted to focus on
energy on for the final project. This data can allow us to look at patterns
among fatal police shootings in the US and analysis thouse. This is important as, especially in the last couple
of years, the amount of fatal police shootings have been surronding the media. This
topic is one people should be paying attention to as we question: Should police
have the ability to be the jury, judge and executioner of US citzens? Should police being
killing people they vow to protect? Looking at this data we can find patterns and see
if the people being shot are putting the police in danger and demographic wise who is being shot
most. Using this data we can start answering those bigger questions such as; are these shootings justified?")
})
#################Mary-MaePage
gender_name <- reactive({
if(is.null(input$gender)) {
by_race
}  else {
by_race %>%
filter(gender %in% input$gender)
}
=======
runApp()
runApp()
manner_death <- data %>%
group_by(manner_of_death, gender) %>%
summarise(occurances = n())
output$mannerBar <- renderPlot({
ggplot(name_gender(), aes(x= manner_of_death, occurances ))+
geom_bar(col = "Red")+
labs(title= "Manner of Death Bar Graph", x= "Manner of Death", y= "Occurrances")
>>>>>>> 544cc3444d2ec85a0913febfec18a48efb002e22
})
output$race_bar <- renderPlot({
ggplot(gender_name(), aes(race, shootings )) +
geom_col(col = "Black", fill = input$Color) +
labs (
x = "Race",
y = "Number of Shootings",
title = "Number of Shootings by Race and Gender") +
theme(axis.text.x=element_text(angle=50, size=10, vjust=0.5))
})
<<<<<<< HEAD
=======
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
manner_death <- data %>%
group_by(manner_of_death, race) %>%
summarise(occurances = n())
View(by_race)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(manner_death)
high_gender <- manner_death %>%
filter(race == input$race) %>%
arrange(desc(occurances))
high_race <- by_race %>%
filter(gender == input$gender) %>%
arrange(desc(shootings))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
<<<<<<< HEAD
shiny::runApp()
runApp()
runApp()
View(data)
subset(data, select = -
c(name,date,age, threat_level,flee, body_camera ))
subset(data, select = -
c(name,date,age, threat_level,flee, body_camera,city ))
rm(data)
data <- read.csv("fatal-police-shootings-data.csv.zip")
subset(data, select = -
c(name,date,age, threat_level,flee, body_camera,city ))
data <- read.csv("fatal-police-shootings-data.csv.zip")
data <- read.csv("fatal-police-shootings-data.csv")
rm(data)
data <- read.csv("fatal-police-shootings-data.csv.bz2")
subset(data, select = -
c(name,date,age, threat_level,flee, body_camera,city ))
subset(state_shapes, select = -
c(subregion, order))
old_data <- read.csv("fatal-police-shootings-data.csv.bz2")
data <- subset(data, select = -
c(name,date,age, threat_level,flee, body_camera,city ))
by_race_counts <- data %>%
group_by(race) %>%
summarise(shootings = n())
by_race <- left_join(data, by_race_counts, by = "race")
rm(old_data)
runApp()
runApp()
rm(by_race_counts)
by_race <- data %>%
group_by(race) %>%
summarise(shootings = n())
runApp()
rm(data)
data <- read.csv("fatal-police-shootings-data.csv.bz2")
runApp()
by_race <- data %>%
group_by(race, gender) %>%
summarise(shootings = n())
runApp()
runApp()
=======
=======
>>>>>>> 544cc3444d2ec85a0913febfec18a48efb002e22
output$message <- renderText ({
high_race <- by_race %>%
filter(gender == input$gender) %>%
arrange(desc(shootings))
paste0("The race ",  high_race$race[1],  " and the gender ",  input$gender , " have the highest amount of fatal police shootings with ", high_race$shootings[1], " shootings. ")
})
output$descripation_one <- renderText({
print("This bar graph helps us look at the disparities of fatal police shootings among race. The user
can then adjust it to further look at the differences between different races and different genders. This allows us to
understand and look at the patterns of who is being fatally shot most by police.")
})
##################End Mary-Mae Page
###################AmyPage
tf_select <- reactive({
selection <- prop_ill_map %>% input$col_list
tf_select <- select(long, lat, group, .dots = selection)
})
output$map <- renderPlot({
shoot_map_plot <- ggplot(tf_select(), aes(long, lat, group = group)) +
geom_polygon(aes(fill = selection)) + coord_quickmap() +
labs(
title = "Proportion of Individuals Fatally Shot and Mentally-Ill, by State"
) +  scale_fill_gradient2("Proportion of Total Shot")
shoot_map_plot
})
output$map_descript <- renderText({
print("This map plots the proportion of individuals fatally shot by police that were mentally ill.
States colored in with a lighter shade of purple have higher proportions than states colored
with a darker purple The plot suggests that states with the highest proportions of mentally ill
victims of police shootings were Wyoming, South Dakota, and Vermont. The states with the lowest
proportions were Kentucky, Maine, and Montana. Overall, the map suggests that states in the
northern parts of the US have higher proportions of mentally ill individuals shot by policemen
than southern states.")
})
###################End Amy Page
##################AshleyPage
race_name <- reactive({
if(is.null(input$race)) {
manner_death
}  else {
manner_death %>%
>>>>>>> 485849a566da239ebd21f75cec8c96dd5beed9b6
filter(race %in% input$race)
}
})
output$mannerBar <- renderPlot({
ggplot(race_name(), aes(manner_of_death, occurances ))+
geom_col(col = "Red")+
labs(title= "Manner of Death Bar Graph", x= "Manner of Death", y= "Occurrances")
})
output$mannercomment <- renderText({
high_gender <- manner_death %>%
filter(race == input$race) %>%
arrange(desc(occurances))
paste0("The race ",  input$race , " had ", high_gender$occurances[1]  ," ",  high_gender$manner_of_death[1] , " vs ", high_gender$occurances[2]  , " ",  high_gender$manner_of_death[2])
})
###################End Ashley Page
#############conclusion
output$conclusion1 <- renderText({
paste0("Throughout our project, we aimed to examine aspects of the data that would provide insight to the characteristics
of the victims of police shootings. The first panel displays a USmap which is colored according to the proportion of individuals
who were fatally shot by policemen and were mentally ill (out of all individuals shot). This map gave evidence to suggest
states in the north had higher proportions of mentally ill individuals who were victimized, while states in the south had
a smaller proportion. This evidence suggests that there is a disproportionate approach as to how US policing systems issue order
when confronting an individual with a mental illness. This suggests that nationwide training should be instilled in police forces
to detail how to respond to calls involving mentally ill individuals. It is then that we can hope to reduce these numbers.")
})
output$conclusion2 <- renderText({
paste0("In our next page, we showed a bar graph that showed the number of fatal shootings spiliting up by race. This showed us that in this data, the most people
being shot were the ", by_race_high$race[1], " race and ", by_race_high$gender[1], " gender with ", by_race_high$shootings[1],
" shootings. This number is closely followed by Black Males with ", by_race_high$shootings[2], " shootings. This shows us
that Males are being shot more than females and in this particular data White Males more than Blakc Males. In our last page we
created a bar graph that depicted that manner of death.")
})
output$conclusion3 <- renderText({
paste0("All of this data is very important because it allows us to investigate the Police force and think about the manner of fatal shootings. Are they always justified? With these
numbers we can see that although more people are armed than unarmed, there is still an alarming number of unarmed
individuals being shot. Furthermore we can start investigating deeper questions such as, who gets to decides if a person
lives or dies? Should the Police person have the ability to be the judge, jury and executor?")
})
output$conclusion4 <- renderText({
paste0("This data as a whole we believe was fairly unbiased. It was giving numbers and statistics which were not pulled out of thin air. The major issue that we had with this
data is that there were many catergories that did not have a variable in the box, like empty parts in the data. This made it
a little more diffcult when we constructed charts.
")
})
output$conclusion5 <- renderText({
paste0("What's next with this project? Investigate another data set that shows
fatal Police shooting but during a different time period. We could compare and contrast the data and look how fatal Police shootings
have changed over time.")
})
}
runApp()
runApp()
runApp()
runApp()
runApp()
View(data)
### plot map
plot3 <- ggplot(wa_map_2016, aes(long, lat, group = group)) +
labs(title = "Black to White Incarceration Ratio by WA County (2016)") +
geom_polygon(aes(fill = difference), color = "black") +
coord_quickmap() +
scale_fill_gradient2("Ratio") +
theme_void() +
theme(plot.title = element_text(hjust = 0.2,
face ="bold",
size = 12))
## Set up
library(tidyverse)
library(maps)
## Load data, takes a minute
## But note: you have to download the data first, and adjust
## the path here for your computer!
vera <- read.csv("https://raw.githubusercontent.com/vera-institute/incarceration-trends/master/incarceration_trends.csv")
# number of observations (rows) and variables (columns)
obs <- nrow(vera) # 153811
vari <- ncol(vera) # 121
# number of counties observed
counties <- vera %>%
group_by(county_name) %>%
summarize()
num_counties <- nrow(counties) #1876
# average total population by county by year
ave_pop <- vera %>%
summarize(mean = mean(total_pop, na.rm = TRUE)) # 84300.51
# average total jail population by county by year
ave_prison_pop <- vera %>%
summarize(mean = mean(total_prison_pop, na.rm = TRUE)) # 161.1213
# average total jail white population by county by year
ave_prison_pop_white <- vera %>%
summarize(mean = mean(white_prison_pop, na.rm = TRUE)) # 90.6666
# average total jail black population by county by year
ave_prison_pop_black <- vera %>%
summarize(mean = mean(black_prison_pop, na.rm = TRUE)) # 81.17556
# county and year with the greatest number of jailed individuals
max_prison <- vera %>%
arrange(desc(total_prison_pop)) %>%
select(state, county_name, total_prison_pop, year)
max_prison_pop <- max_prison[1, 3] # 23467.19
max_prison_state <- max_prison[1, 1] # CA
max_prison_county <- max_prison[1, 2] # Los Angeles County
max_prison_year <- max_prison[1,4] # 1993
### filter to values of interest
time_series <- vera %>%
select(black_prison_pop, year, county_name, state) %>%
filter(state == "WA")
### filter to top 10 counties
incar_time_wa <- time_series %>%
group_by(county_name) %>%
filter(black_prison_pop != "Na") %>%
filter(black_prison_pop == max(black_prison_pop)) %>%
arrange(desc(black_prison_pop)) %>%
head(10)
incar_time_wa_counties <- incar_time_wa$county_name
time_series_plot <- time_series %>%
filter(county_name %in% c(incar_time_wa_counties)) %>%
filter(black_prison_pop != "Na")
### plot data
plot1 <- ggplot(time_series_plot,
aes(year,
black_prison_pop,
col = county_name)) +
geom_line() +
labs(x = "Year",
y = "Population of Black Prisoners",
title = "Black Prisoner Population Over Time",
subtitle = "of Top 10 WA Counties with Largest Black Imprisoned Population") +
scale_color_discrete("Counties") +
theme(plot.title = element_text(hjust = 0.2,
face ="bold",
size = 10),
plot.subtitle = element_text(hjust = 0.2,
face = "bold",
size = 10))
## Plot 2: Black vs. White Incarcerations
### calculate white incarceration rate
BW_incar_val <- vera %>%
select(white_pop_15to64, white_prison_pop, year, county_name,
state, black_pop_15to64, black_prison_pop, year, county_name, state, fips) %>%
filter(state == "WA")
BW_incar_rate <- BW_incar_val %>%
group_by(county_name) %>%
mutate(white_incar_rate = (white_prison_pop / white_pop_15to64) * 100,
black_incar_rate = (black_prison_pop / black_pop_15to64) *100) %>%
filter(white_incar_rate != "Na" & black_incar_rate != "Na")
### plot black vs. white incarceration rates
plot2 <- ggplot(BW_incar_rate, aes(black_incar_rate, white_incar_rate, col = county_name)) +
geom_point(size = 1) +
geom_abline(color = "red") +
labs(x = "Black Incarceration Rate (%)",
y = "White Incarceration Rate(%)",
title = "Black vs. White Incarceration Rates by WA County",
legend = "County") +
theme(plot.title = element_text(hjust = 0.2,
face ="bold",
size = 12),
legend.title = element_text(size = 7),
legend.text = element_text(size = 6),
legend.position = "bottom",
legend.key.size = unit(0.4, "cm")) +
scale_color_discrete("Counties")
### find where difference between black and white is greatest
BW_incar_rate <- BW_incar_rate %>%
mutate(difference = black_incar_rate / white_incar_rate) %>%
arrange(desc(difference))
BW_max_diff <- BW_incar_rate %>%
select(county_name, year, difference) %>%
head(1)
## Plot 3: maps
### sort data
incar_rate <- vera %>%
select(white_pop_15to64, white_prison_pop, year, county_name,
state, black_pop_15to64, black_prison_pop, year, county_name, state, fips) %>%
filter(state == "WA", year == 2016) %>%
group_by(county_name) %>%
mutate(white_incar_rate = (white_prison_pop / white_pop_15to64) * 100,
black_incar_rate = (black_prison_pop / black_pop_15to64) *100,
difference = black_incar_rate / white_incar_rate)
county_shapes <- map_data("county") %>%
# load county boundary data (package "maps")
unite(polyname, region, subregion, sep = ",") %>%
# put the polygon name in the same form as in county.fips
left_join(county.fips, by = "polyname")
wa_map <- left_join(incar_rate, county_shapes, by = "fips")
wa_map_2016 <- wa_map %>%
filter(year == 2016)
### plot map
plot3 <- ggplot(wa_map_2016, aes(long, lat, group = group)) +
labs(title = "Black to White Incarceration Ratio by WA County (2016)") +
geom_polygon(aes(fill = difference), color = "black") +
coord_quickmap() +
scale_fill_gradient2("Ratio") +
theme_void() +
theme(plot.title = element_text(hjust = 0.2,
face ="bold",
size = 12))
View(plot3)
plot3
View(vera)
View(incar_rate)
View(prop_ill_dat)
})
runApp()
View(prop_ill_map)
runApp()
runApp()
runApp()
runApp()
<<<<<<< HEAD
=======
=======
>>>>>>> b3ba2d31871481a048162075810576cf5db958ed
>>>>>>> 284c179e7ca5f951f56d4efe2e667b7ebcf25fca
>>>>>>> 97b0a914a4326ad6ea78e098ef2f83414a1961d2
>>>>>>> 544cc3444d2ec85a0913febfec18a48efb002e22
library(shiny, warn.conflicts = FALSE)
library(dplyr, warn.conflicts = FALSE)
library(ggplot2, warn.conflicts = FALSE)
library(tidyverse, warn.conflicts = FALSE)
library(maps, warn.conflicts = FALSE)
library(rsconnect, warn.conflicts = FALSE)
data <- read.csv("fatal-police-shootings-data.csv.bz2")
by_race <- data %>%
group_by(race, gender) %>%
summarise(shootings = n())
shoot_map_data <- left_join(shoot_map_data, fips_data, by = c("state" = "state_abbr"))
##find highest count by race
by_race_high <-  by_race %>%
arrange(desc(shootings))
# create map of shooting counts
## load data
fips_data <- read.csv("https://raw.githubusercontent.com/kjhealy/fips-codes/master/state_fips_master.csv")
state_abb_data <- read.csv("https://raw.githubusercontent.com/jasonong/List-of-US-States/master/states.csv")
state_abb_data$State <- tolower(state_abb_data$State)
## manipulate data
shoot_map_data <- data %>%
select(id, armed, state, signs_of_mental_illness)
##find highest shoot count
shoot_count_highest <- shoot_count %>%
arrange(desc(count))
## add fips data to shooting data
fips_data <- fips_data %>% select(state_abbr, fips)
shoot_map_data <- left_join(shoot_map_data, fips_data, by = c("state" = "state_abbr"))
## add fips data to shooting data
fips_data <- fips_data %>% select(state_abbr, fips)
shoot_map_data <- left_join(shoot_map_data, fips_data, by = c("state" = "state_abbr"))
## create state data
state_shapes <- map_data("state")
state_shapes <- left_join(state_shapes, state_abb_data, by = c("region" = "State"))
## attach state data to shooting data
shoot_map <- left_join(state_shapes, shoot_map_data, by = c("Abbreviation" = "state"))
## attach counts to shooting and map data
shoot_map <- left_join(shoot_map, shoot_count, by = "Abbreviation")
shoot_map <- shoot_map %>%
rename(
state_count = count
)
## attach armed counts to shooting map
shoot_map <- left_join(shoot_map, armed_count, by = "armed")
shoot_map <- shoot_map %>%
rename(
armed_count = count
)
prop_ill_true <- shoot_map %>%
filter(signs_of_mental_illness == "True") %>%
group_by(Abbreviation) %>%
summarize(true_count = n())
prop_ill_false <- shoot_map %>%
filter(signs_of_mental_illness == "False") %>%
group_by(Abbreviation) %>%
summarize(false_count = n())
shoot_map <- left_join(shoot_map, prop_ill_false, by = "Abbreviation")
shoot_map <- left_join(shoot_map, prop_ill_true, by = "Abbreviation")
prop_ill_dat <- shoot_map %>%
select(false_count, true_count, long, lat, group,
Abbreviation, signs_of_mental_illness, fips.x, fips.y, state_count) %>%
group_by(Abbreviation) %>%
mutate(prop_true = (true_count / state_count) * 100,
prop_false = (false_count / state_count) * 100)
prop_ill_map <- prop_ill_dat %>%
select(prop_true, prop_false, long, lat, group, fips.x, fips.y)
## create counts of shootings by state
shoot_count <- shoot_map %>%
group_by(Abbreviation) %>%
summarize(count = n())
armed_count <- shoot_map %>%
group_by(armed) %>%
summarize(count = n()) %>% arrange(desc(count))
armed_top_ten <- armed_count[-4,]
## reduce to top ten
armed_top_ten <- armed_top_ten[1:10, 1]
armed_top_ten <- armed_top_ten$armed
## filter shoot data to only these top ten armed
shoot_map <- shoot_map %>% filter(armed %in% armed_top_ten)
## plot map
shoot_map_plot <- ggplot(shoot_map, aes(long, lat, group = group)) +
geom_polygon(aes(fill = count)) + coord_quickmap() +
labs(
title = "Count of Fatal Police Shootings by US State"
)
###Group by Manner of death
manner_death <- data %>%
group_by(manner_of_death, race) %>%
summarise(occurances = n())
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
<<<<<<< HEAD
View(data)
View(armed_count)
library(shiny, warn.conflicts = FALSE)
library(dplyr, warn.conflicts = FALSE)
library(ggplot2, warn.conflicts = FALSE)
library(tidyverse, warn.conflicts = FALSE)
library(maps, warn.conflicts = FALSE)
library(rsconnect, warn.conflicts = FALSE)
data <- read.csv("fatal-police-shootings-data.csv.bz2")
shoot_map_data <- left_join(shoot_map_data, fips_data, by = c("state" = "state_abbr"))
# create map of shooting counts
## load data
fips_data <- read.csv("https://raw.githubusercontent.com/kjhealy/fips-codes/master/state_fips_master.csv")
state_abb_data <- read.csv("https://raw.githubusercontent.com/jasonong/List-of-US-States/master/states.csv")
state_abb_data$State <- tolower(state_abb_data$State)
## manipulate data
shoot_map_data <- data %>%
select(state, signs_of_mental_illness)
## add fips data to shooting data
fips_data <- fips_data %>% select(state_abbr, fips)
shoot_map_data <- left_join(shoot_map_data, fips_data, by = c("state" = "state_abbr"))
## add fips data to shooting data
fips_data <- fips_data %>% select(state_abbr, fips)
shoot_map_data <- left_join(shoot_map_data, fips_data, by = c("state" = "state_abbr"))
## create state data
state_shapes <- map_data("state")
state_shapes <- left_join(state_shapes, state_abb_data, by = c("region" = "State"))
## attach state data to shooting data
shoot_map <- left_join(state_shapes, shoot_map_data, by = c("Abbreviation" = "state"))
## attach counts to shooting and map data
shoot_map <- left_join(shoot_map, shoot_count, by = "Abbreviation")
shoot_map <- shoot_map %>%
rename(
state_count = count
)
## attach armed counts to shooting map
shoot_map <- left_join(shoot_map, armed_count, by = "armed")
shoot_map <- shoot_map %>%
rename(
armed_count = count
)
##find highest shoot count
shoot_count_highest <- shoot_count %>%
arrange(desc(count))
## add fips data to shooting data
fips_data <- fips_data %>% select(state_abbr, fips)
shoot_map_data <- left_join(shoot_map_data, fips_data, by = c("state" = "state_abbr"))
## add fips data to shooting data
fips_data <- fips_data %>% select(state_abbr, fips)
shoot_map_data <- left_join(shoot_map_data, fips_data, by = c("state" = "state_abbr"))
## create state data
state_shapes <- map_data("state")
state_shapes <- left_join(state_shapes, state_abb_data, by = c("region" = "State"))
## attach state data to shooting data
shoot_map <- left_join(state_shapes, shoot_map_data, by = c("Abbreviation" = "state"))
## attach counts to shooting and map data
shoot_map <- left_join(shoot_map, shoot_count, by = "Abbreviation")
shoot_map <- shoot_map %>%
rename(
state_count = count
)
## attach armed counts to shooting map
shoot_map <- left_join(shoot_map, armed_count, by = "armed")
prop_ill_true <- shoot_map %>%
filter(signs_of_mental_illness == "True") %>%
group_by(Abbreviation) %>%
summarize(true_count = n())
prop_ill_false <- shoot_map %>%
filter(signs_of_mental_illness == "False") %>%
group_by(Abbreviation) %>%
summarize(false_count = n())
shoot_map <- left_join(shoot_map, prop_ill_false, by = "Abbreviation")
shoot_map <- left_join(shoot_map, prop_ill_true, by = "Abbreviation")
prop_ill_dat <- shoot_map %>%
select(false_count, true_count, long, lat, group,
Abbreviation, signs_of_mental_illness, fips.x, fips.y, state_count) %>%
group_by(Abbreviation) %>%
mutate(prop_true = (true_count / state_count) * 100,
prop_false = (false_count / state_count) * 100)
prop_ill_map <- prop_ill_dat %>%
select(prop_true, prop_false, long, lat, group, fips.x, fips.y)
## create counts of shootings by state
shoot_count <- shoot_map %>%
group_by(Abbreviation) %>%
summarize(count = n())
prop_ill_dat <- shoot_map %>%
select(false_count, true_count, long, lat, group,
Abbreviation, signs_of_mental_illness, fips.x, fips.y, state_count) %>%
group_by(Abbreviation) %>%
mutate(prop_true = (true_count / state_count) * 100,
prop_false = (false_count / state_count) * 100)
prop_ill_map <- prop_ill_dat %>%
select(prop_true, prop_false, long, lat, group, fips.x, fips.y)
## create counts of shootings by state
shoot_count <- shoot_map %>%
group_by(Abbreviation) %>%
summarize(count = n())
###Group by Manner of death
manner_death <- data %>%
group_by(manner_of_death, race) %>%
summarise(occurances = n())
runApp()
data$id <- data$name <- data$date <- data$armed <- data$age <- data$city <- data$threat_level <- data$flee <- data$body_camera <- NULL
View(data)
data$id <-
data$name <-
data$date <-
data$armed <-
data$age <-
data$city <-
data$threat_level <-
data$flee <-
data$body_camera <-
NULL
View(data)
library(shiny, warn.conflicts = FALSE)
library(dplyr, warn.conflicts = FALSE)
library(ggplot2, warn.conflicts = FALSE)
library(tidyverse, warn.conflicts = FALSE)
library(maps, warn.conflicts = FALSE)
library(rsconnect, warn.conflicts = FALSE)
data <- read.csv("fatal-police-shootings-data.csv.bz2")
data$id <-
data$name <-
data$date <-
data$armed <-
data$age <-
data$city <-
data$threat_level <-
data$flee <-
data$body_camera <-
NULL
by_race <- data %>%
group_by(race, gender) %>%
summarise(shootings = n())
shoot_map_data <- left_join(shoot_map_data, fips_data, by = c("state" = "state_abbr"))
##find highest count by race
by_race_high <-  by_race %>%
arrange(desc(shootings))
# create map of shooting counts
## load data
fips_data <- read.csv("https://raw.githubusercontent.com/kjhealy/fips-codes/master/state_fips_master.csv")
state_abb_data <- read.csv("https://raw.githubusercontent.com/jasonong/List-of-US-States/master/states.csv")
state_abb_data$State <- tolower(state_abb_data$State)
## manipulate data
shoot_map_data <- data %>%
select(state, signs_of_mental_illness)
##find highest shoot count
shoot_count_highest <- shoot_count %>%
arrange(desc(count))
## add fips data to shooting data
fips_data <- fips_data %>% select(state_abbr, fips)
shoot_map_data <- left_join(shoot_map_data, fips_data, by = c("state" = "state_abbr"))
## add fips data to shooting data
fips_data <- fips_data %>% select(state_abbr, fips)
shoot_map_data <- left_join(shoot_map_data, fips_data, by = c("state" = "state_abbr"))
## create state data
state_shapes <- map_data("state")
state_shapes <- left_join(state_shapes, state_abb_data, by = c("region" = "State"))
## attach state data to shooting data
shoot_map <- left_join(state_shapes, shoot_map_data, by = c("Abbreviation" = "state"))
## attach counts to shooting and map data
shoot_map <- left_join(shoot_map, shoot_count, by = "Abbreviation")
shoot_map <- shoot_map %>%
rename(
state_count = count
)
prop_ill_true <- shoot_map %>%
filter(signs_of_mental_illness == "True") %>%
group_by(Abbreviation) %>%
summarize(true_count = n())
prop_ill_false <- shoot_map %>%
filter(signs_of_mental_illness == "False") %>%
group_by(Abbreviation) %>%
summarize(false_count = n())
shoot_map <- left_join(shoot_map, prop_ill_false, by = "Abbreviation")
shoot_map <- left_join(shoot_map, prop_ill_true, by = "Abbreviation")
prop_ill_dat <- shoot_map %>%
select(false_count, true_count, long, lat, group,
Abbreviation, signs_of_mental_illness, fips.x, fips.y, state_count) %>%
group_by(Abbreviation) %>%
mutate(prop_true = (true_count / state_count) * 100,
prop_false = (false_count / state_count) * 100)
prop_ill_map <- prop_ill_dat %>%
select(prop_true, prop_false, long, lat, group, fips.x, fips.y)
## create counts of shootings by state
shoot_count <- shoot_map %>%
group_by(Abbreviation) %>%
summarize(count = n())
###Group by Manner of death
manner_death <- data %>%
group_by(manner_of_death, race) %>%
summarise(occurances = n())
runApp()
=======
>>>>>>> f6e5bdd48999382c24c6be57b8bfa3dc38c311d3
>>>>>>> 485849a566da239ebd21f75cec8c96dd5beed9b6
